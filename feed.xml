<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[random-agent]]></title><description><![CDATA[random-agent]]></description><link>https://rcalsaverini.github.io</link><generator>RSS for Node</generator><lastBuildDate>Fri, 21 Apr 2017 20:33:18 GMT</lastBuildDate><atom:link href="https://rcalsaverini.github.io/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[The Operational Semantics for Monads]]></title><description><![CDATA[<p><strong>Disclaimer: this is an old blog post from a very old wordpress blog and may contain inacuracies. I reproduced it as is for sentimental reasons. I may revisit this theme later.</strong></p>
<p>While randomly browsing around on <a href="http://planet.haskell.org/">Planet Haskell</a> I've found <a href="http://apfelmus.nfshost.com/articles/operational-monad.html#concatenation-and-thoughts-on-the-interface">a post</a> on <a href="http://apfelmus.nfshost.com/">Heinrich Apfelmus' blog</a> about something called "operational semantics" for monads. Found it very iluminating. Basically it's a form to implement monads focusing not on defining the bind and return operators, but on what the monad is really supposed to do. It's a view where a monad define a Domain Specific Language, that must be interpreted in order to cause it's effects. It seems to me it's exactly what is implemented in the <a href="http://hackage.haskell.org/packages/archive/MonadPrompt/1.0.0.2/doc/html/Control-Monad-Prompt.html">monadprompt (Control.Monad.Prompt)</a> package, although I'm not sure.</p>
<h1 id="the-operational-monad"><a href="#the-operational-monad" class="phenomic-HeadingAnchor">#</a>The Operational Monad</h1>
<pre><code class="hljs language-haskell"><span class="hljs-meta">{-# LANGUAGE GADTs #-}</span>
<span class="hljs-keyword">import</span> Control.Monad
<span class="hljs-keyword">import</span> Data.Map (<span class="hljs-type">Map</span>, <span class="hljs-title">fromList</span>, <span class="hljs-title">unionWith</span>)</code></pre>
<p>The definition of a monad on this approach starts with a common interface given by the following data type and a singleton function:</p>
<pre><code class="hljs language-haskell"><span class="hljs-class"><span class="hljs-keyword">data</span> <span class="hljs-type">Program</span> m a where</span>
    <span class="hljs-type">Then</span> :: m a -> (a -> <span class="hljs-type">Program</span> m b) -> <span class="hljs-type">Program</span> m b
    <span class="hljs-type">Return</span> :: a -> <span class="hljs-type">Program</span> m a

<span class="hljs-title">singleton</span> :: m a -> <span class="hljs-type">Program</span> m a
<span class="hljs-title">singleton</span> i = i `<span class="hljs-type">Then</span>` <span class="hljs-type">Return</span></code></pre>
<p>Note that the types of the data constructors Then and Return are very similar (but not equal…) to the types of the monadic operations (>>=) and return. This identification of class functions with data constructors is recurring throughout this post. This data type is instanciated as a traditional monad as follows:</p>
<pre><code class="hljs language-haskell"><span class="hljs-class"><span class="hljs-keyword">instance</span> <span class="hljs-type">Monad</span> (<span class="hljs-type">Program</span> <span class="hljs-title">m</span>) <span class="hljs-keyword">where</span></span>
    return = <span class="hljs-type">Return</span>
    (<span class="hljs-type">Return</span> a)    >>= f  = f a
    (i `<span class="hljs-type">Then</span>` is) >>= f  = i `<span class="hljs-type">Then</span>` (\ x -> is x >>= f)</code></pre>
<p>This is all we need! As an example let's describe the implementation of the State Monad within this approach. This is exactly the first example given by Apfelmus on his post, disguised as a stack machine.</p>
<h1 id="example-implementing-the-state-monad"><a href="#example-implementing-the-state-monad" class="phenomic-HeadingAnchor">#</a>Example: implementing the State Monad</h1>
<p>The operational approach to monads begins with recognizing what operations you want your monad to perform. A State Monad have a state, a return value and two function: one that allows us to retrieve the state as the return value, and one that allows us to insert a new state. Let's represent this in the following GADT:</p>
<pre><code class="hljs language-haskell"><span class="hljs-class"><span class="hljs-keyword">data</span> <span class="hljs-type">StateOp</span> st retVal where</span>
    <span class="hljs-type">Get</span> :: <span class="hljs-type">StateOp</span> st st  <span class="hljs-comment">-- retrieve current state as a returned value</span>
    <span class="hljs-type">Put</span> :: st -> <span class="hljs-type">StateOp</span> st ()  <span class="hljs-comment">-- insert a new state</span></code></pre>
<p>This are the operations needed on the <code>State</code> Monad, but the monad itself is a sequence of compositions of such operations:</p>
<pre><code class="hljs language-haskell"><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-type">State</span> st retVal = <span class="hljs-type">Program</span> (<span class="hljs-type">StateOp</span> <span class="hljs-title">st</span>) retVal</span></code></pre>
<p>Note that the type synonym State st is a monad already and satisfy all the monad laws by construction. We don't need to worry about implementing return and <code>(>>=)</code> correctly: they are already defined.</p>
<p>So far, so good but… how do we use this monad in practice? This types define a kind of Domain Specific Language: we have operations represented by Get and Put and we can compose them in little programs by using Then and Return. Now we need to write an interpreter for this language. I find this is greatly simplified if you notice that the construct</p>
<pre><code class="hljs language-haskell"><span class="hljs-title">do</span> x &#x3C;- singleton foo
   bar x</code></pre>
<p>can be translated as <em>foo <code>Then</code> bar</em> in this context. Thus, to define how you'll interpret the later, just think what's the effect you want to have when you write the former.</p>
<p>Our interpreter will take a <code>State st retVal</code> and a state st as input and return a pair: the next state and the returned value <code>(st, retVal)</code>:</p>
<pre><code class="hljs language-haskell"><span class="hljs-title">interpret</span> :: <span class="hljs-type">State</span> st retVal -> st -> (st, retVal)</code></pre>
<p>First of all, how should we interpret the program <code>Return val</code> ? This program just takes any state input and return it unaltered, with val as it's returned value:</p>
<pre><code class="hljs language-haskell"><span class="hljs-title">interpret</span> (<span class="hljs-type">Return</span> val) st = (st, val)</code></pre>
<p>The next step is to interpret the program <em>foo <code>Then</code> bar</em>. Looking at the type of things always helps: Then, in this context, have type <code>StateOp st a -> (a -> State st b) -> State st b</code>. So, in the expression <em>foo <code>Then</code> bar</em>, foo is of type <code>StateOp st a</code>, that is, it's a stateful computation with state of type <code>st</code> and returned value of type <code>a</code>. The rest of the expression, <code>bar</code>, is of type <code>a -> State st b</code>, that is, it expects to receive something of the type of the returned value of foo and return the next computation to be executed. We have two options for <code>foo</code>: <code>Get</code> and <code>Put x</code>.</p>
<p>When executing <em>Get <code>Then</code> bar</em>, we want this program to return the current state as the returned value. But we also want it to call the execution of <code>bar val</code>, the rest of the code. And if <code>val</code> is the value returned by the last computation, <code>Get</code>, it must be the current state:</p>
<pre><code class="hljs language-haskell"><span class="hljs-title">interpret</span> (<span class="hljs-type">Get</span> `<span class="hljs-type">Then</span>` bar) st = interpret (bar st) st</code></pre>
<p>The program <em>Put x <code>Then</code> bar</em> is suposed to just insert <code>x</code> as the new state and call <code>bar val</code>. But if you look at the type of <code>Put x</code>, it's returned value is empty: <code>()</code>. So we must call <code>bar ()</code>. The current state is then discarded and substituted by <code>x</code>.</p>
<pre><code class="hljs language-haskell"><span class="hljs-title">interpret</span> (<span class="hljs-type">Put</span> x `<span class="hljs-type">Then</span>` bar) _  = interpret (bar ()) x</code></pre>
<p>We have our interpreter (which, you guessed right, is just the function <code>runState</code> from `Control.Monad.State) and now it's time to write programs in this language. Let's then define some helper functions:</p>
<pre><code class="hljs language-haskell"><span class="hljs-title">get</span> :: <span class="hljs-type">State</span> st st
<span class="hljs-title">get</span> = singleton <span class="hljs-type">Get</span>

<span class="hljs-title">put</span> :: st -> <span class="hljs-type">State</span> st ()
<span class="hljs-title">put</span> = singleton . <span class="hljs-type">Put</span></code></pre>
<p>and write some code to be interpreted:</p>
<pre><code class="hljs language-haskell"><span class="hljs-title">example</span> :: <span class="hljs-type">Num</span> a => <span class="hljs-type">State</span> a a
<span class="hljs-title">example</span> = <span class="hljs-keyword">do</span> x &#x3C;- get
          put (x + <span class="hljs-number">1</span>)
          return x

<span class="hljs-title">test1</span> = interpret example <span class="hljs-number">0</span>
<span class="hljs-title">test2</span> = interpret (replicateM <span class="hljs-number">10</span> example) <span class="hljs-number">0</span></code></pre>
<p>This can be run in ghci to give exactly what you would expect from the state monad:</p>
<pre><code class="hljs language-haskell">*<span class="hljs-type">Main</span>> test1
(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)

*<span class="hljs-type">Main</span>> test2
(<span class="hljs-number">10</span>,[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>])</code></pre>
<h1 id="vector-spaces"><a href="#vector-spaces" class="phenomic-HeadingAnchor">#</a>Vector Spaces</h1>
<p>The approach seems very convenient from the point of view of developing applications, as it's focused on what are actions the code must implement and how the code should be executed. But it seems to me that the focus on the operations the monad will implement is also very convenient to think about mathematical structures. To give an example, I'd like to implement a monad for Vector Spaces, in the spirit of Dan Piponi (Sigfpe)'s ideas <a href="http://blog.sigfpe.com/2007/02/monads-for-vector-spaces-probability.html">here</a>, <a href="http://blog.sigfpe.com/2007/03/monads-vector-spaces-and-quantum.html">here</a> and <a href="http://blog.sigfpe.com/2009/05/trace-diagrams-with-monads.html">here</a>.</p>
<p>A vector space $\mathbb{V_F}$ is a set of elements $\mathbf{x}\in\mathbb{V_F}$ that can be summed ($\mathbf{x} + \mathbf{y} \in\mathbb{V_F}$ if $\mathbf{x},\mathbf{y} \in \mathbb{V_F}$) and multiplied elements of a field ($\alpha\mathbf{x}$ if $\alpha\in \mathcal{F}$ and $\mathbf{x}\in\mathbb{V_F}$). If we want this to be implemented as a monad then, we should, in analogy with what we did for the State Monad, write a GADT with data constructors that implement the sum and product by a scalar:</p>
<pre><code class="hljs language-haskell"><span class="hljs-class"><span class="hljs-keyword">data</span> <span class="hljs-type">VectorOp</span> field label where</span>

    <span class="hljs-type">Sum</span> :: <span class="hljs-type">Vector</span> field label
        -> <span class="hljs-type">Vector</span> field label
        -> <span class="hljs-type">VectorOp</span> field label

    <span class="hljs-type">Mul</span> :: field
        -> <span class="hljs-type">Vector</span> field label
        -> <span class="hljs-type">VectorOp</span> field label

<span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-type">Vector</span> field label = <span class="hljs-type">Program</span> (<span class="hljs-type">VectorOp</span> <span class="hljs-title">field</span>) label</span></code></pre>
<p>and then we must implement a interpreter:</p>
<pre><code class="hljs language-haskell"><span class="hljs-title">runVector</span> :: (<span class="hljs-type">Num</span> field, <span class="hljs-type">Ord</span> label) => <span class="hljs-type">Vector</span> field label -> <span class="hljs-type">Map</span> label field
<span class="hljs-title">runVector</span> (<span class="hljs-type">Return</span> a) = fromList [(a, <span class="hljs-number">1</span>)]
<span class="hljs-title">runVector</span> (<span class="hljs-type">Sum</span> u v `<span class="hljs-type">Then</span>` foo) = <span class="hljs-keyword">let</span> uVec = (runVector (u >>= foo))
                                     vVec = (runVector (v >>= foo))
                                 <span class="hljs-keyword">in</span> unionWith (+) uVec vVec
<span class="hljs-title">runVector</span> (<span class="hljs-type">Mul</span> x u `<span class="hljs-type">Then</span>` foo) = fmap (x*) (runVector (u >>= foo))</code></pre>
<p>The interpreter <code>runVector</code> takes a vector and returns it's representation as a <code>Map</code>. As an example, we could do the following:</p>
<pre><code class="hljs language-haskell"><span class="hljs-keyword">infixr</span> <span class="hljs-number">3</span> &#x3C;*>
<span class="hljs-keyword">infixr</span> <span class="hljs-number">2</span> &#x3C;+>

<span class="hljs-title">u</span> &#x3C;+> v = singleton $ <span class="hljs-type">Sum</span> u v
<span class="hljs-title">x</span> &#x3C;*> u = singleton $ <span class="hljs-type">Mul</span> x u

<span class="hljs-class"><span class="hljs-keyword">data</span> <span class="hljs-type">Base</span> = <span class="hljs-type">X</span> | <span class="hljs-type">Y</span> | <span class="hljs-type">Z</span> <span class="hljs-keyword">deriving</span>(<span class="hljs-type">Ord</span>, <span class="hljs-type">Eq</span>, <span class="hljs-type">Show</span>)</span>

<span class="hljs-title">x</span>, y, z :: <span class="hljs-type">Vector</span> <span class="hljs-type">Double</span> <span class="hljs-type">Base</span>
<span class="hljs-title">x</span> = return <span class="hljs-type">X</span>
<span class="hljs-title">y</span> = return <span class="hljs-type">Y</span>
<span class="hljs-title">z</span> = return <span class="hljs-type">Z</span>

<span class="hljs-title">reflectXY</span> :: <span class="hljs-type">Vector</span> <span class="hljs-type">Double</span> <span class="hljs-type">Base</span> -> <span class="hljs-type">Vector</span> <span class="hljs-type">Double</span> <span class="hljs-type">Base</span>
<span class="hljs-title">reflectXY</span> vecU = <span class="hljs-keyword">do</span> cp &#x3C;- vecU
                    return (transf cp)
                        <span class="hljs-keyword">where</span> transf <span class="hljs-type">X</span> = <span class="hljs-type">Y</span>
                              transf <span class="hljs-type">Y</span> = <span class="hljs-type">X</span>
                              transf <span class="hljs-type">Z</span> = <span class="hljs-type">Z</span></code></pre>
<p>and test this on ghci:</p>
<pre><code>*Main> runVector $ x &#x3C;+> y
fromList [(X,1.0),(Y,1.0)]

*Main> runVector $ reflectXY $ x &#x3C;+> z
fromList [(Y,1.0),(Z,1.0)]
</code></pre>
<p>As Dan Piponi points out in his talk, any function acting on the base f :: Base -> Base is lifted to a linear map on the vector space Space field Base by doing (because this is the Free Vector Space over <code>Base</code>):</p>
<pre><code>linearTrans f u = do vec &#x3C;- u
                  return (f vec)
</code></pre>
<p>More on this later. :)</p>
]]></description><link>https://rcalsaverini.github.io/posts/operational-semantics/</link><guid isPermaLink="true">https://rcalsaverini.github.io/posts/operational-semantics/</guid><dc:creator><![CDATA[Rafael S. Calsaverini]]></dc:creator><pubDate>Thu, 26 Aug 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Stochastic Processes as Monad Transformers]]></title><description><![CDATA[<p>I have a difficulty to understand functional programming concepts that I can’t put to some very simple and natural use (natural for me, of course). I need to find the perfect simple example to implement to finally understand something. And I’m not a computer scientist, so things like parsers and compilers have very little appeal to me (probably because I don’t understand them…). I’m a physicist, so this drives me to look for physical problems that can be implemented in Haskell so I can understand some concepts.</p>
<p>Monad transformers still eludes me. But I think I finally got the perfect subject were I can understand them: stochastic processes! First some book keeping:</p>
<pre><code class="hljs language-haskell"><span class="hljs-keyword">import</span> Control.Monad.State
<span class="hljs-keyword">import</span> Control.Monad
<span class="hljs-keyword">import</span> Control.Monad.Rand</code></pre>
<p>Now, stochastic processes have characteristics related to two different monads. In one hand, they are dynamical processes, and the way to implement dynamics in Haskell is with state monads. For example, if I want to iterate the logistic map:</p>
<p>$$x_{t+1} = \alpha x_t\left(1-x_t\right)$$</p>
<p>I could do the following:</p>
<pre><code class="hljs language-haskell">  f :: <span class="hljs-type">Double</span> -> <span class="hljs-type">Double</span>
  f x = <span class="hljs-number">4</span>*x*(<span class="hljs-number">1</span>-x)

  logistic :: <span class="hljs-type">State</span> <span class="hljs-type">Double</span> <span class="hljs-type">Double</span>
  logistic = <span class="hljs-keyword">do</span> x0 &#x3C;- get
        <span class="hljs-keyword">let</span> x1 = f x
        put x1
        return x1
  runLogistic :: <span class="hljs-type">State</span> <span class="hljs-type">Double</span> [<span class="hljs-type">Double</span>]
  runLogistic n x0= evalState (replicateM n logistic) x0</code></pre>
<p>Running this on ghci would give you, for example:</p>
<pre><code class="hljs language-haskell">  *<span class="hljs-type">Main</span>> runLogistic <span class="hljs-number">5</span> <span class="hljs-number">0.2</span>
  [<span class="hljs-number">0.6400000000000001</span>,<span class="hljs-number">0.9215999999999999</span>,<span class="hljs-number">0.28901376000000045</span>, <span class="hljs-number">0.8219392261226504</span>,<span class="hljs-number">0.5854205387341</span>]</code></pre>
<p>So we can make the loose correspondence: dynamical system ↔ state monad.</p>
<p>On the other hand, stochastic processes are compositions of random variables, and this is done with the Rand monad (found in <code>Control.Monad.Random</code>). As an example, the Box-Muller formula tells us that, if I have two inpendent random variables \(x\) and \(y\), distributed uniformly between in the \([0, 1]\) interval, then, the expression:</p>
<p>$$\sqrt{-2\log(x)}\cos(2\pi y)$$</p>
<p>will be normally distributed. We can write then:</p>
<pre><code class="hljs language-haskell"><span class="hljs-title">boxmuller</span> :: <span class="hljs-type">Double</span> -> <span class="hljs-type">Double</span> -> <span class="hljs-type">Double</span>
<span class="hljs-title">boxmuller</span> x y = sqrt(<span class="hljs-number">-2</span>*log x)*cos(<span class="hljs-number">2</span>*pi*y)

<span class="hljs-title">normal</span> :: <span class="hljs-type">Rand</span> <span class="hljs-type">StdGen</span> <span class="hljs-type">Double</span>  <span class="hljs-comment">-- normally distributed</span>
<span class="hljs-title">normal</span> = <span class="hljs-keyword">do</span> x &#x3C;- getRandom
            y &#x3C;- getRandom
            return $ boxmuller x y

<span class="hljs-title">normals</span> n = replicateM n normal <span class="hljs-comment">-- n independent samples from normal</span></code></pre>
<p>Running this function we get what we need:</p>
<pre><code class="hljs language-haskell">*<span class="hljs-type">Main</span>> (evalRand $ normals <span class="hljs-number">5</span>) (mkStdGen <span class="hljs-number">0</span>) =
[<span class="hljs-number">0.1600255836730147</span>,<span class="hljs-number">0.1575360140445035</span>,<span class="hljs-number">-1.595627933129274</span>,
<span class="hljs-number">-0.18196791439834512</span>,<span class="hljs-number">-1.082222285056746</span>]</code></pre>
<p>So what is a stochastic process? In very rough terms: is a dynamical system with random variables. So we need a way to make the <code>Rand</code> monad to talk nicely with the <code>State</code> monad. The way to do this is to use a monad transformer, in this case, the <code>StateT</code> transformer. Monad transformers allows you to combine the functionalities of two different monads. In the case of the <code>StateT</code> monads, they allow you to add a state to any other monad you want. In our case, we want to wrap the <code>Rand</code> monad inside a <code>StateT</code> transformer and work with things of type:</p>
<pre><code class="hljs language-haskell"><span class="hljs-title">foo</span> ::  <span class="hljs-type">StateT</span> s (<span class="hljs-type">Rand</span> <span class="hljs-type">StdGen</span>) r</code></pre>
<p>This type represent a monad that can store a state with type s, like the state monad, and can generate random variables of type r, like the rand monad. In general we would have a type</p>
<pre><code class="hljs language-haskell"><span class="hljs-title">foo2</span> ::(<span class="hljs-type">MonadTrans</span> t, <span class="hljs-type">Monad</span> m) => t m a</code></pre>
<p>In this case, <code>t = StateT s</code> and <code>m = Rand StdGen</code>. The class <code>MonadTrans</code> is defined in <code>Control.Monad.Trans</code>, and provides the function:</p>
<pre><code class="hljs language-haskell"><span class="hljs-title">lift</span> :: (<span class="hljs-type">MonadTrans</span> t, <span class="hljs-type">Monad</span> m) => m a -> t m a</code></pre>
<p>In this case, <code>t</code> is itself a monad, and can be treated like one through the code. It works like this: inside a do expression you can use the <code>lift</code> function to access the inner monad. Things called with lift will operate in the inner monad. Things called without <code>lift</code> will operate in the outer monad.</p>
<p>So, suppose we want to simulate this very simple process:</p>
<p>$$x_{t+1} = x_t + \eta_t$$</p>
<p>where \(\eta_t\) is drawn from a normal distribution. We would do:</p>
<pre><code class="hljs language-haskell"><span class="hljs-title">randomWalk</span> :: <span class="hljs-type">StateT</span> <span class="hljs-type">Double</span> (<span class="hljs-type">Rand</span> <span class="hljs-type">StdGen</span>) <span class="hljs-type">Double</span>
<span class="hljs-title">randomWalk</span> = <span class="hljs-keyword">do</span> eta &#x3C;- lift normal
                x &#x3C;- get
                <span class="hljs-keyword">let</span> x' = x + eta
                put x'
                return x'
<span class="hljs-title">runWalk</span> :: <span class="hljs-type">Int</span> -> <span class="hljs-type">Double</span> -> <span class="hljs-type">StdGen</span> -> [<span class="hljs-type">Double</span>]
<span class="hljs-title">runWalk</span> n x0 gen = evalRand (replicateM n $ evalStateT randomWalk x0) gen</code></pre>
<p>The <code>evalStateT</code> function is just evalState adapted to run a StateT monad. Running this on ghci we get:</p>
<pre><code class="hljs language-haskell"> *<span class="hljs-type">Main</span>> runWalk <span class="hljs-number">5</span> <span class="hljs-number">0.0</span> gen
[<span class="hljs-number">0.1600255836730147</span>,<span class="hljs-number">0.1575360140445035</span>,<span class="hljs-number">-1.595627933129274</span>,
<span class="hljs-number">-0.18196791439834512</span>,<span class="hljs-number">-1.082222285056746</span>]</code></pre>
<p>This is what we can accomplish: we can easily operate simultaneously with functions that expect a state monad, like put and get, we can unwrap things with <code>&#x3C;-</code> from the inner <code>Rand</code> monad by using <code>lift</code> , and we can return things to the state monad. We could have any monad inside the <code>StateT</code> transformer. For example, we could have another <code>State</code> monad. Here is a fancy implementation of the Fibonacci sequence using a <code>State</code> monad (that stores the last but one value in the sequence as its internal state) inside a <code>StateT</code> transfomer (that stores the last value of the sequence):</p>
<pre><code class="hljs language-haskell"><span class="hljs-title">fancyFib</span> :: <span class="hljs-type">StateT</span> <span class="hljs-type">Int</span> (<span class="hljs-type">State</span> <span class="hljs-type">Int</span>) <span class="hljs-type">Int</span>
<span class="hljs-title">fancyFib</span> = <span class="hljs-keyword">do</span> old &#x3C;- lift get
              new &#x3C;- get
              <span class="hljs-keyword">let</span> new' = new + old
                  old' = new
              lift $ put old'
              put new'
              return new

<span class="hljs-title">fancyFibs</span> :: <span class="hljs-type">Int</span> -> <span class="hljs-type">StateT</span> <span class="hljs-type">Int</span> (<span class="hljs-type">State</span> <span class="hljs-type">Int</span>) [<span class="hljs-type">Int</span>]
<span class="hljs-title">fancyFibs</span> n = replicateM n fancyFibs</code></pre>
<p>And we can run this to get:</p>
<pre><code class="hljs language-haskell">*<span class="hljs-type">Main</span>> evalState (evalStateT (fancyFibs <span class="hljs-number">10</span>) <span class="hljs-number">1</span>) <span class="hljs-number">0</span>
[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">21</span>,<span class="hljs-number">34</span>,<span class="hljs-number">55</span>]</code></pre>
]]></description><link>https://rcalsaverini.github.io/posts/stochastic-processes/</link><guid isPermaLink="true">https://rcalsaverini.github.io/posts/stochastic-processes/</guid><dc:creator><![CDATA[Rafael S. Calsaverini]]></dc:creator><pubDate>Tue, 03 Aug 2010 00:00:00 GMT</pubDate></item></channel></rss>